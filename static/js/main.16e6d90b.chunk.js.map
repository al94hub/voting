{"version":3,"sources":["pages/Home/index.tsx","services/vote-storage.ts","pages/Guardrians/index.tsx","pages/Stakeholders/index.tsx","services/metamask.ts","services/contracts.ts","components/App/App.tsx","index.tsx","contracts-info.js"],"names":["Home","react_default","a","createElement","key","hasLocalStorageAccess","window","localStorage","save","addresses","from","ethereum","selectedAddress","setItem","concat","JSON","stringify","err","get","value","getItem","parse","GuardianPage","_ref","validatorsContract","votingContract","metamaskService","_useState","useState","_useState2","Object","slicedToArray","validators","setValidators","_useState3","_useState4","proposedValidator","setProposedValidator","getCurrentAddress","fetchValidators","_ref2","asyncToGenerator","regenerator_default","mark","_callee","validatorsInState","validatorsInfo","validatorsInStorage","resultValidators","wrap","_context","prev","next","methods","getValidators","call","sent","Promise","all","map","address","getValidatorData","reduce","acc","currAddress","idx","checked","name","url","forEach","undefined","stop","apply","this","arguments","commitVote","_ref3","_callee2","stagedValidators","_context2","keys","filter","vote","send","useEffect","Fragment","type","defaultChecked","onChange","toggleCheck","href","target","rel","placeholder","ev","onClick","addValidator","then","StakeholderPage","guardiansContract","candidate","setCandidate","guardians","setGuardians","fetchGuardians","details","getGuardians","getGuardianData","curr","delegate","MetamaskService","enable","reject","web3","Web3","validatorsContractFactory","eth","Contract","validatorsAbiJson","abi","OrbsContractsInfo","guardiansContractFactory","guardiansAbiJson","votingContractFactory","votingAbiJson","App","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","state","_this2","BrowserRouter","basename","process","Link","to","data-hook","Route","exact","path","component","Stakeholders","assign","Guardrians","Component","ReactDOM","render","components_App_App","document","getElementById","module","exports","OrbsValidators","OrbsVoting","OrbsGaurdians"],"mappings":"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","file":"static/js/main.16e6d90b.chunk.js","sourcesContent":["import React from 'react';\n\nconst Home = () => {\n  return <h2>Welcome to Orbs Voting</h2>;\n};\n\nexport default Home;\n","const key = '_ORBS_VOTING_HISTORY_';\n\nconst hasLocalStorageAccess = () => {\n  return !!window.localStorage;\n};\n\nexport const save = (addresses: string[]): boolean => {\n  const from = ethereum.selectedAddress;\n  if (!hasLocalStorageAccess()) {\n    return false;\n  }\n  try {\n    window.localStorage.setItem(`${key}${from}`, JSON.stringify(addresses));\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n\nexport const get = (): string[] => {\n  const from = ethereum.selectedAddress;\n  if (!hasLocalStorageAccess) {\n    return [];\n  }\n  try {\n    const value = window.localStorage.getItem(`${key}${from}`);\n    if (value) {\n      return JSON.parse(value);\n    } else {\n      return [];\n    }\n  } catch (err) {\n    return [];\n  }\n};\n","import React, { useEffect, useState } from 'react';\nimport { get, save } from '../../services/vote-storage';\n\nconst GuardianPage = ({\n  validatorsContract,\n  votingContract,\n  metamaskService\n}) => {\n  const [validators, setValidators] = useState({} as {\n    [address: string]: { checked: boolean; name: string; url: string };\n  });\n  const [proposedValidator, setProposedValidator] = useState('');\n\n  const from = metamaskService.getCurrentAddress();\n\n  const fetchValidators = async () => {\n    const validatorsInState = await validatorsContract.methods\n      .getValidators()\n      .call({ from });\n\n    const validatorsInfo = await Promise.all(\n      validatorsInState.map(address =>\n        validatorsContract.methods.getValidatorData(address).call({ from })\n      )\n    );\n\n    const validatorsInStorage = get();\n\n    const resultValidators = validatorsInState.reduce(\n      (acc, currAddress, idx) => {\n        acc[currAddress] = {\n          checked: false,\n          name: validatorsInfo[idx]['_name'],\n          url: validatorsInfo[idx]['_website']\n        };\n        return acc;\n      },\n      {}\n    );\n\n    validatorsInStorage.forEach(address => {\n      if (resultValidators[address] !== undefined) {\n        resultValidators[address].checked = true;\n      }\n    });\n    setValidators(resultValidators);\n  };\n\n  const addValidator = () => {\n    validatorsContract.methods\n      .addValidator(proposedValidator)\n      .send({ from })\n      .then(() => fetchValidators())\n      .then(() => setProposedValidator(''));\n  };\n\n  const commitVote = async () => {\n    const stagedValidators = Object.keys(validators).filter(\n      address => validators[address].checked\n    );\n    await votingContract.methods.vote(stagedValidators).send({ from });\n    save(stagedValidators);\n  };\n\n  const toggleCheck = (address: string) => {\n    validators[address].checked = !validators[address].checked;\n  };\n\n  useEffect(() => {\n    fetchValidators();\n  }, []);\n\n  return (\n    <>\n      <h3>Hello Guardian, {from}</h3>\n      <dl>\n        {Object.keys(validators) &&\n          Object.keys(validators).map(address => (\n            <dt key={address}>\n              <input\n                type=\"checkbox\"\n                value={address}\n                defaultChecked={validators[address].checked}\n                onChange={() => toggleCheck(address)}\n              />\n              <a\n                href={validators[address].url}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                {validators[address].name}\n              </a>\n            </dt>\n          ))}\n      </dl>\n      <div>\n        <input\n          type=\"text\"\n          placeholder=\"Enter validator address\"\n          value={proposedValidator}\n          onChange={ev => setProposedValidator(ev.target.value)}\n        />\n        <button onClick={addValidator}>Add</button>\n        <button onClick={commitVote}>Vote</button>\n      </div>\n    </>\n  );\n};\n\nexport default GuardianPage;\n","import React, { useState, useEffect } from 'react';\n\nconst StakeholderPage = ({\n  guardiansContract,\n  votingContract,\n  metamaskService\n}) => {\n  const from = metamaskService.getCurrentAddress();\n\n  const [candidate, setCandidate] = useState('');\n  const [guardians, setGuardians] = useState({} as {\n    [address: string]: { name: string; url: string };\n  });\n\n  const fetchGuardians = async () => {\n    const addresses = await guardiansContract.methods\n      .getGuardians()\n      .call({ from });\n    const details = await Promise.all(\n      addresses.map(address =>\n        guardiansContract.methods.getGuardianData(address).call({ from })\n      )\n    );\n    setGuardians(\n      addresses.reduce((acc, curr, idx) => {\n        acc[curr] = {\n          name: details[idx]['_name'],\n          url: details[idx]['_website']\n        };\n        return acc;\n      }, {})\n    );\n  };\n\n  useEffect(() => {\n    fetchGuardians();\n  }, []);\n\n  const delegate = () => {\n    votingContract.methods.delegate(candidate).send({ from });\n  };\n\n  return (\n    <>\n      <h3>Hello Stakeholder, {from}</h3>\n      <div>\n        <dl>\n          {Object.keys(guardians) &&\n            Object.keys(guardians).map(address => (\n              <dt key={address}>\n                <input\n                  type=\"radio\"\n                  name=\"candidate\"\n                  value={address}\n                  onChange={ev => setCandidate(ev.target.value)}\n                />\n                <a\n                  href={guardians[address].url}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  {guardians[address].name}\n                </a>\n              </dt>\n            ))}\n        </dl>\n        <button onClick={delegate}>Delegate</button>\n      </div>\n    </>\n  );\n};\n\nexport default StakeholderPage;\n","export default class MetamaskService {\n  enable() {\n    return ethereum\n      .enable()\n      .then(\n        (addresses: string[]) => addresses[0],\n        (err: any) => Promise.reject(err)\n      );\n  }\n  getCurrentAddress() {\n    return ethereum.selectedAddress;\n  }\n}\n","import Web3 from 'web3';\nimport * as OrbsContractsInfo from '../contracts-info';\nimport votingAbiJson from '../contracts/OrbsVoting.json';\nimport guardiansAbiJson from '../contracts/OrbsGaurdians.json';\nimport validatorsAbiJson from '../contracts/OrbsValidators.json';\n\nconst web3 = new Web3(ethereum as any);\n\nexport const validatorsContractFactory = () => {\n  return new web3.eth.Contract(\n    validatorsAbiJson.abi as any,\n    window['__OrbsContractsInfo__']\n      ? window['__OrbsContractsInfo__']['OrbsValidators']['address']\n      : OrbsContractsInfo.OrbsValidators.address\n  );\n};\n\nexport const guardiansContractFactory = () => {\n  return new web3.eth.Contract(\n    guardiansAbiJson.abi as any,\n    window['__OrbsContractsInfo__']\n      ? window['__OrbsContractsInfo__']['OrbsGuardians']['address']\n      : OrbsContractsInfo.OrbsGaurdians.address\n  );\n};\n\nexport const votingContractFactory = () => {\n  return new web3.eth.Contract(\n    votingAbiJson.abi as any,\n    window['__OrbsContractsInfo__']\n      ? window['__OrbsContractsInfo__']['OrbsVoting']['address']\n      : OrbsContractsInfo.OrbsVoting.address\n  );\n};\n","import './App.css';\nimport Home from '../../pages/Home';\nimport React, { Component } from 'react';\nimport GuardianPage from '../../pages/Guardrians';\nimport StakeholderPage from '../../pages/Stakeholders';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link,\n  RouteProps\n} from 'react-router-dom';\nimport MetamaskService from '../../services/metamask';\nimport {\n  validatorsContractFactory,\n  guardiansContractFactory,\n  votingContractFactory\n} from '../../services/contracts';\n\ninterface IState {\n  validatorsContract: Object;\n  guardiansContract: Object;\n  votingContract: Object;\n  metamaskService: MetamaskService;\n}\n\nclass App extends Component<{}, IState> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      validatorsContract: validatorsContractFactory(),\n      guardiansContract: guardiansContractFactory(),\n      votingContract: votingContractFactory(),\n      metamaskService: new MetamaskService()\n    };\n  }\n  async componentDidMount() {\n    await this.state.metamaskService.enable();\n  }\n  render() {\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <div>\n          <header />\n          <nav>\n            <ul>\n              <li>\n                <Link to=\"/\">Home</Link>\n              </li>\n              <li>\n                <Link to=\"/stakeholder\" data-hook=\"nav-stakeholder\">\n                  Stakeholder\n                </Link>\n              </li>\n              <li>\n                <Link to=\"/guardian\">Guardian</Link>\n              </li>\n            </ul>\n          </nav>\n          <main>\n            <Route exact path=\"/\" component={Home} />\n            <Route\n              path=\"/stakeholder\"\n              component={(props: RouteProps) => (\n                <StakeholderPage\n                  {...props}\n                  votingContract={this.state.votingContract}\n                  metamaskService={this.state.metamaskService}\n                  guardiansContract={this.state.guardiansContract}\n                />\n              )}\n            />\n            <Route\n              path=\"/guardian\"\n              component={(props: RouteProps) => (\n                <GuardianPage\n                  {...props}\n                  validatorsContract={this.state.validatorsContract}\n                  votingContract={this.state.votingContract}\n                  metamaskService={this.state.metamaskService}\n                />\n              )}\n            />\n          </main>\n          <footer />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","module.exports = {\n  OrbsValidators: { address: '0xD3a92e0341307432FC6cD388F345a81adc992cC5' },\n  OrbsVoting: { address: '0x88F6fa5FE1050Ff61ba248Bf74b0c1334C47A24E' },\n  OrbsGaurdians: { address: '0x05d4a53625A3a0aA9Bc6F0EbF26D56D6ca57C297' }\n};\n"],"sourceRoot":""}